import os
import asyncio
import yaml
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

from pybit.unified_trading import HTTP
from bybit_data import (
    fetch_kline,
    fetch_instrument_info,
    fetch_wallet_equity,
    fetch_available_balance,
)
from indicators import calculate_indicators
from scoring import score_signal
from regime import detect_regime

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN not set in .env")

bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

with open("config.yaml", "r") as f:
    _cfg = yaml.safe_load(f)

SYMBOL = _cfg.get("symbol", "BTCUSDT")
LOWER_TF = _cfg.get("lower_tf", "1")
TEST_TRADE_USDT = float(_cfg.get("test_trade_size", 10))
# –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ ‚Äî –Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –≤—Å–µ–≥–¥–∞ –≤ LIVE
TESTNET = bool(_cfg.get("testnet", False))

# –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç –≤ ¬´—Å—Ç–æ–ø–µ¬ª ‚Äî –≤–∫–ª—é—á–∞–π /on
TRADING_ACTIVE = False


def _make_session_live() -> HTTP:
    # –í—Å–µ–≥–¥–∞ live
    return HTTP(
        testnet=False,
        api_key=os.getenv("BYBIT_API_KEY"),
        api_secret=os.getenv("BYBIT_API_SECRET"),
    )


async def send_telegram_message(text: str):
    if TELEGRAM_CHAT_ID:
        try:
            await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)
        except Exception as e:
            print(f"Telegram send error: {e}")


@dp.message(Command("start"))
async def start_cmd(m: types.Message):
    await m.answer(
        "ü§ñ <b>Bybit V5 Intraday Bot (LIVE)</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/on ‚Äì –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/off ‚Äì –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n"
        "/status ‚Äì —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
        "/price ‚Äì —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞\n"
        "/why ‚Äì –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ\n"
        "/balance ‚Äì –±–∞–ª–∞–Ω—Å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞\n"
        "/testtrade ‚Äì –õ–ê–ô–í: –∫—É–ø–∏—Ç—å –∏ —Å—Ä–∞–∑—É –ø—Ä–æ–¥–∞—Ç—å (–±—ã—Å—Ç—Ä—ã–π –∫—Ä—É–≥) –Ω–∞ —Å—É–º–º—É –∏–∑ config.yaml\n"
    )


@dp.message(Command("on"))
async def on_cmd(m: types.Message):
    global TRADING_ACTIVE
    TRADING_ACTIVE = True
    await m.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–∫–ª—é—á–µ–Ω–∞ (LIVE).")


@dp.message(Command("off"))
async def off_cmd(m: types.Message):
    global TRADING_ACTIVE
    TRADING_ACTIVE = False
    await m.answer("‚è∏Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∞.")


@dp.message(Command("status"))
async def status_cmd(m: types.Message):
    status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if TRADING_ACTIVE else "üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞"
    mode = "LIVE" if not TESTNET else "TESTNET"
    await m.answer(f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: {status}\n–†–µ–∂–∏–º: {mode}\n–°–∏–º–≤–æ–ª: {SYMBOL}\n–¢–§: {LOWER_TF}m")


@dp.message(Command("price"))
async def price_cmd(m: types.Message):
    session = _make_session_live()
    kl = fetch_kline(session, SYMBOL, LOWER_TF, 2)
    if not kl:
        await m.answer("‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö —Å–≤–µ—á–µ–π")
        return
    last_close = float(kl[-1][4])
    await m.answer(f"üí∞ {SYMBOL} = <b>{last_close:.2f}</b>")


@dp.message(Command("balance"))
async def balance_cmd(m: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç:
      ‚Ä¢ Total Equity (UNIFIED)
      ‚Ä¢ Available USDT (availableToTrade.walletBalance)
      ‚Ä¢ –ö—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ SYMBOL (–µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞)
    """
    session = _make_session_live()
    equity = fetch_wallet_equity(session)
    available = fetch_available_balance(session, "USDT")

    # –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    pos_txt = "–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç"
    try:
        resp = session.get_positions(category="linear", symbol=SYMBOL)
        if resp.get("retCode") == 0:
            lst = (resp.get("result") or {}).get("list", []) or []
            for p in lst:
                sz = float(p.get("size") or 0)
                if abs(sz) > 0:
                    side = p.get("side")
                    avg = float(p.get("avgPrice") or 0)
                    upnl = float(p.get("unrealisedPnl") or 0)
                    pos_txt = f"{side} {SYMBOL} | size={sz} | avg={avg:.2f} | uPnL={upnl:.2f} USDT"
                    break
    except Exception as e:
        pos_txt = f"‚ö†Ô∏è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é: {e}"

    eq_txt = f"{equity:.2f} USDT" if equity is not None else "‚Äî"
    av_txt = f"{available:.2f} USDT" if available is not None else "‚Äî"

    await m.answer(
        "üßæ <b>–ë–∞–ª–∞–Ω—Å</b>\n"
        f"Total Equity: <b>{eq_txt}</b>\n"
        f"Available (USDT): <b>{av_txt}</b>\n"
        f"–ü–æ–∑–∏—Ü–∏—è: {pos_txt}"
    )


@dp.message(Command("why"))
async def why_cmd(m: types.Message):
    session = _make_session_live()
    kl = fetch_kline(session, SYMBOL, LOWER_TF, 200)
    if not kl:
        await m.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ ‚Äî –Ω–µ—Ç —Å–≤–µ—á–µ–π.")
        return
    df = pd.DataFrame(kl, columns=["timestamp","open","high","low","close","volume","turnover"])
    df["timestamp"] = pd.to_datetime(pd.to_numeric(df["timestamp"], errors="coerce"), unit="ms")
    for c in ["open","high","low","close","volume","turnover"]:
        df[c] = pd.to_numeric(df[c], errors="coerce")
    df.sort_values("timestamp", inplace=True); df.reset_index(drop=True, inplace=True)
    df = calculate_indicators(df)

    # –£–ø—Ä–æ—â—ë–Ω–Ω–æ: —Å—á—ë—Ç –ø–æ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º
    metrics = {"oi": [], "funding": None, "basis": None, "lsr": []}
    total, breakdown = score_signal(df, metrics)
    regime = detect_regime(df, metrics)

    last = df.iloc[-1]
    txt = (
        f"ü§ñ <b>–ê–Ω–∞–ª–∏–∑ —Å–µ–π—á–∞—Å (LIVE)</b>\n"
        f"EMA9/21/50: {last['ema_9']:.1f} / {last['ema_21']:.1f} / {last['ema_50']:.1f}\n"
        f"RSI: {last['rsi']:.1f} | ADX: {last['adx']:.1f}\n"
        f"VWAP: {last['vwap']:.1f}\n\n"
        f"üìä TA: {breakdown['TA']:+.2f}\n"
        f"üìà BybitData: {breakdown['BybitData']:+.2f}\n"
        f"üìä Volume: {breakdown['Volume']:+.2f}\n"
        f"üå™Ô∏è Volatility: {breakdown['Volatility']:+.2f}\n"
        f"‚û°Ô∏è –ò—Ç–æ–≥–æ–≤—ã–π —Å–∫–æ—Ä: <b>{total:+.2f}</b>\n"
        f"‚ö° –†–µ–∂–∏–º: <b>{regime}</b>\n"
    )
    await m.answer(txt)


@dp.message(Command("testtrade"))
async def testtrade_cmd(m: types.Message):
    """
    LIVE –∫—Ä—É–≥: BUY –Ω–∞ —Å—É–º–º—É TEST_TRADE_USDT ‚Üí —Å—Ä–∞–∑—É SELL reduceOnly —Ç–µ–º –∂–µ qty.
    –í–∞–∂–Ω–æ: —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–∞—è —Å–¥–µ–ª–∫–∞.
    """
    session = _make_session_live()

    # 1) –¶–µ–Ω–∞
    kl = fetch_kline(session, SYMBOL, "1", 2)
    if not kl:
        await m.answer("‚ùå –ù–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Å–¥–µ–ª–∫–∏.")
        return
    price = float(kl[-1][4])

    # 2) –§–∏–ª—å—Ç—Ä—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–ª–æ—Ç/–º–∏–Ω–∏–º–∞–ª–∫–∏)
    info = fetch_instrument_info(session, SYMBOL)
    lot_step = float(info.get("lotSizeFilter", {}).get("qtyStep", 0.001)) if info else 0.001
    min_qty  = float(info.get("lotSizeFilter", {}).get("minOrderQty", 0.001)) if info else 0.001
    min_val  = float(info.get("lotSizeFilter", {}).get("minOrderAmt", 5.0)) if info else 5.0

    def _round_step(v, step):
        import math
        return math.floor(v / step) * step if step > 0 else v

    # 3) –†–æ–≤–Ω–æ TEST_TRADE_USDT –ø–æ —Ä—ã–Ω–∫—É
    raw_qty = TEST_TRADE_USDT / price if price > 0 else min_qty
    qty = max(_round_step(raw_qty, lot_step), min_qty)
    if qty * price < min_val:
        await m.answer(f"‚ùå {TEST_TRADE_USDT} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ ({min_val} USDT).")
        return

    # 4) BUY
    try:
        buy_resp = session.place_order(
            category="linear",
            symbol=SYMBOL,
            side="Buy",
            orderType="Market",
            qty=str(qty),
            timeInForce="GoodTillCancel",
            reduceOnly=False,
        )
    except Exception as e:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {e}")
        return

    if not (isinstance(buy_resp, dict) and buy_resp.get("retCode") == 0):
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {buy_resp}")
        return

    # 5) –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π SELL reduceOnly –Ω–∞ —Ç—É –∂–µ qty (–∑–∞–∫—Ä–æ–µ—Ç –ø–æ–∑–∏—Ü–∏—é)
    try:
        sell_resp = session.place_order(
            category="linear",
            symbol=SYMBOL,
            side="Sell",
            orderType="Market",
            qty=str(qty),
            reduceOnly=True,
            timeInForce="GoodTillCancel",
        )
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –ö—É–ø–∏–ª–∏, –Ω–æ –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–¥–∞—Ç—å reduceOnly: {e}")
        return

    if isinstance(sell_resp, dict) and sell_resp.get("retCode") == 0:
        await m.answer(
            "üí• LIVE —Ç–µ—Å—Ç –∫—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω:\n"
            f"BUY {SYMBOL} qty={qty} @‚âà{price:.2f}\n"
            f"SELL reduceOnly qty={qty}"
        )
    else:
        await m.answer(f"‚ö†Ô∏è –ö—É–ø–∏–ª–∏, –Ω–æ –ø—Ä–æ–¥–∞–∂–∞ reduceOnly –Ω–µ –ø—Ä–æ—à–ª–∞: {sell_resp}")


async def init_telegram():
    print("üöÄ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã (LIVE).")
    await dp.start_polling(bot)
